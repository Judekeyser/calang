<section>
  <h1>Username input program</h1>

<p>The user name input program deals with collecting user name information
from the user, by prompting a dialog window on the screen and waiting for
the user confirmation.</p>

<p>No input is expected, as the program handles a dialog box <dfn><code>$MODAL_ELEMENT: MODAL_ELEMENT</code></dfn>
object that directly refers to the HTML element in the document, by definition of that type.
An output <dfn class="output"><code>$TEXT_RECORD: BYTES</code></dfn>
is emitted with the result of the modal.</p>

<p>The <code>$MODAL_ELEMENT</code> is expected to be capable of reacting to the <code>...</code> event by
returning a native <dfn><code>$CLICK_PROGRAM: PROGRAM</code></dfn> program. This native program ends by returning a boolean
<code>$RES: BOOLEAN</code> that evaluates to <code>true</code> if the user successfully pressed the OK button from the dialog box,
or <code>false</code> if the user pressed the CANCEL button.</p>

<p>The <code>$MODAL_ELEMENT</code> is also expected to be capable of reacting to the <code>?</code> event, by
returning a <code>BYTES</code> object that corresponds to the user input.</p>

<p>In addition to those events, the <code>$MODAL_ELEMENT</code> should react to <code>display!</code> and <code>close!</code> events,
in order to display and close itself, respectively. Those concerns are internal aspects of the <code>$MODAL_ELEMENT</code> object and
their implementation may vary from one runtime to another.</p>

<hr>

<p>Below is an accurate description of the program steps and the interactions with the native modal object</p>

<section>
  <h1>Controlling the display of modal</h1>

<p><a name="MODAL_OPEN">Opening the modal</a> element is done by directly sending the <code>display!</code> message on the modal object:
<pre><code>COMPT IN $MODAL_ELEMENT $MODAL_ELEMENT display!</code></pre>
</p>

<p>Similarly, <a name="MODAL_CLOSE">closing the modal element</a> is done by directly sending the <code>close!</code> message:
<pre><code>COMPT IN $MODAL_ELEMENT $MODAL_ELEMENT close!</code></pre></p>
</section>

<section>
  <h1>Ending the program</h1>

<p>The program may end according two different branching strategies: either the user clicked on the OK button and required its identity;
either he cancelled the dialog.</p>

<p>In the case the <a name="USER_CANCELS">user cancels the dialog</a>, we cannot do much better than printing a goodbye message:</p>

<pre><code>PRINT Good bye user, you'll be missed</code></pre>

<p>In the opposite scenario, when the <a name="USER_CONFIRMS">user confirms the dialog</a>,
we can retrieve its identity and store it in a dedicated text field <code>$TEXT_RECORD: BYTES</code>:</p>

<pre><code>COMPT IN $TEXT_RECORD $MODAL_ELEMENT ?</code></pre>

<p>and we print a greeting message</p>

<pre><code>PRINT Warm greeting, password is $TEXT_RECORD</code></pre>

</section>

<section>
  <h1><a name="START">Interactions and main flow</a></h1>

<p>The above paragraphs are organized to create an interactive session. We first open the modal</p>

<pre><code>PERFORM <a href="#MODAL_OPEN">open modal</a></code></pre>

<p>We then invoke the creation of the built-in click program and collect its result in a <dfn><code>$MODAL_RESULT: BOOLEAN</code></dfn> field:</p>

<pre><code>COMPT IN $CLICK_PROGRAM $MODAL_ELEMENT ...
CALL $CLICK_PROGRAM $MODAL_RESULT << $RES</code></pre>

<p>According to the result of this process, we branch between the two possible endings:</p>

<pre><code>PERFORM <a href="#USER_CONFIRMS">greet user</a> IF $MODAL_RESULT ELSE <a href="#USER_CANCELS">say goodbye</a></code></pre>

<p>Note that at the end of this process, the variable <code>$MODAL_RESULT</code> contains the negation of the result returned by the <code>$CLICK_PROGRAM</code> program.
We eventually close the modal:</p>
<pre><code>PERFORM <a href="#MODAL_CLOSE">close modal</a></code></pre>

</section>
